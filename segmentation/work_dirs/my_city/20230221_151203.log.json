{"env_info": "sys.platform: linux\nPython: 3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA A100-PCIE-40GB\nCUDA_HOME: /usr/local/cuda\nNVCC: Build cuda_11.1.TC455_06.29190527_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.9.0+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.10.0+cu111\nOpenCV: 4.6.0\nMMCV: 1.4.2\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMSegmentation: 0.20.2+a1b84a3", "seed": 1524042185, "exp_name": "my_city.py", "mmseg_version": "0.20.2+a1b84a3", "config": "num_things_classes = 0\nnum_stuff_classes = 16\nnum_classes = 16\nnorm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoderMask2FormerAug',\n    pretrained='pretrained/beit_large_patch16_224_pt22k_ft22k.pth',\n    backbone=dict(\n        type='BEiTAdapter',\n        patch_size=16,\n        embed_dim=1024,\n        depth=24,\n        num_heads=16,\n        mlp_ratio=4,\n        qkv_bias=True,\n        use_abs_pos_emb=False,\n        use_rel_pos_bias=True,\n        img_size=896,\n        init_values=1e-06,\n        drop_path_rate=0.3,\n        conv_inplane=64,\n        n_points=4,\n        deform_num_heads=16,\n        cffn_ratio=0.25,\n        deform_ratio=0.5,\n        with_cp=True,\n        interaction_indexes=[[0, 5], [6, 11], [12, 17], [18, 23]],\n        pretrained='pretrained/beit_large_patch16_224_pt22k_ft22k.pth'),\n    decode_head=dict(\n        type='Mask2FormerHead',\n        in_channels=[1024, 1024, 1024, 1024],\n        feat_channels=1024,\n        out_channels=1024,\n        in_index=[0, 1, 2, 3],\n        num_things_classes=0,\n        num_stuff_classes=16,\n        num_queries=100,\n        num_transformer_feat_level=3,\n        pixel_decoder=dict(\n            type='MSDeformAttnPixelDecoder',\n            num_outs=3,\n            norm_cfg=dict(type='GN', num_groups=32),\n            act_cfg=dict(type='ReLU'),\n            encoder=dict(\n                type='DetrTransformerEncoder',\n                num_layers=6,\n                transformerlayers=dict(\n                    type='BaseTransformerLayer',\n                    attn_cfgs=dict(\n                        type='MultiScaleDeformableAttention',\n                        embed_dims=1024,\n                        num_heads=32,\n                        num_levels=3,\n                        num_points=4,\n                        im2col_step=64,\n                        dropout=0.0,\n                        batch_first=False,\n                        norm_cfg=None,\n                        init_cfg=None),\n                    ffn_cfgs=dict(\n                        type='FFN',\n                        embed_dims=1024,\n                        feedforward_channels=4096,\n                        num_fcs=2,\n                        ffn_drop=0.0,\n                        act_cfg=dict(type='ReLU', inplace=True),\n                        with_cp=True),\n                    operation_order=('self_attn', 'norm', 'ffn', 'norm')),\n                init_cfg=None),\n            positional_encoding=dict(\n                type='SinePositionalEncoding', num_feats=512, normalize=True),\n            init_cfg=None),\n        enforce_decoder_input_project=False,\n        positional_encoding=dict(\n            type='SinePositionalEncoding', num_feats=512, normalize=True),\n        transformer_decoder=dict(\n            type='DetrTransformerDecoder',\n            return_intermediate=True,\n            num_layers=9,\n            transformerlayers=dict(\n                type='DetrTransformerDecoderLayer',\n                attn_cfgs=dict(\n                    type='MultiheadAttention',\n                    embed_dims=1024,\n                    num_heads=32,\n                    attn_drop=0.0,\n                    proj_drop=0.0,\n                    dropout_layer=None,\n                    batch_first=False),\n                ffn_cfgs=dict(\n                    embed_dims=1024,\n                    feedforward_channels=4096,\n                    num_fcs=2,\n                    act_cfg=dict(type='ReLU', inplace=True),\n                    ffn_drop=0.0,\n                    dropout_layer=None,\n                    add_identity=True,\n                    with_cp=True),\n                feedforward_channels=4096,\n                operation_order=('cross_attn', 'norm', 'self_attn', 'norm',\n                                 'ffn', 'norm')),\n            init_cfg=None),\n        loss_cls=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=False,\n            loss_weight=2.0,\n            reduction='mean',\n            class_weight=[\n                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,\n                1.0, 1.0, 1.0, 1.0, 0.1\n            ]),\n        loss_mask=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            reduction='mean',\n            loss_weight=5.0),\n        loss_dice=dict(\n            type='DiceLoss',\n            use_sigmoid=True,\n            activate=True,\n            reduction='mean',\n            naive_dice=True,\n            eps=1.0,\n            loss_weight=5.0),\n        train_cfg=dict(\n            num_points=12544,\n            oversample_ratio=3.0,\n            importance_sample_ratio=0.75,\n            assigner=dict(\n                type='MaskHungarianAssigner',\n                cls_cost=dict(type='ClassificationCost', weight=2.0),\n                mask_cost=dict(\n                    type='CrossEntropyLossCost', weight=5.0, use_sigmoid=True),\n                dice_cost=dict(\n                    type='DiceCost', weight=5.0, pred_act=True, eps=1.0)),\n            sampler=dict(type='MaskPseudoSampler')),\n        test_cfg=dict(\n            panoptic_on=True,\n            semantic_on=False,\n            instance_on=True,\n            max_per_image=100,\n            iou_thr=0.8,\n            filter_low_score=True,\n            mode='slide',\n            crop_size=(896, 896),\n            stride=(512, 512))),\n    train_cfg=dict(\n        num_points=12544,\n        oversample_ratio=3.0,\n        importance_sample_ratio=0.75,\n        assigner=dict(\n            type='MaskHungarianAssigner',\n            cls_cost=dict(type='ClassificationCost', weight=2.0),\n            mask_cost=dict(\n                type='CrossEntropyLossCost', weight=5.0, use_sigmoid=True),\n            dice_cost=dict(\n                type='DiceCost', weight=5.0, pred_act=True, eps=1.0)),\n        sampler=dict(type='MaskPseudoSampler')),\n    test_cfg=dict(\n        panoptic_on=True,\n        semantic_on=False,\n        instance_on=True,\n        max_per_image=100,\n        iou_thr=0.8,\n        filter_low_score=True,\n        mode='slide',\n        crop_size=(896, 896),\n        stride=(512, 512)),\n    init_cfg=None)\ndataset_type = 'MyDataset'\ndata_root = '/root/autodl-tmp/data'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (896, 896)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(896, 896), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(896, 896), pad_val=0, seg_pad_val=255),\n    dict(type='ToMask'),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=['img', 'gt_semantic_seg', 'gt_masks', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        img_ratios=[0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0],\n        flip=True,\n        transforms=[\n            dict(\n                type='SETR_Resize',\n                keep_ratio=True,\n                crop_size=(896, 896),\n                setr_multi_scale=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=1,\n    train=dict(\n        type='MyDataset',\n        data_root='/root/autodl-tmp/data',\n        img_dir='images/train',\n        ann_dir='annotations/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(896, 896), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(896, 896), pad_val=0, seg_pad_val=255),\n            dict(type='ToMask'),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_semantic_seg', 'gt_masks', 'gt_labels'])\n        ]),\n    val=dict(\n        type='MyDataset',\n        data_root='/root/autodl-tmp/data',\n        img_dir='images/val',\n        ann_dir='annotations/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                img_ratios=[0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0],\n                flip=True,\n                transforms=[\n                    dict(\n                        type='SETR_Resize',\n                        keep_ratio=True,\n                        crop_size=(896, 896),\n                        setr_multi_scale=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='MyDataset',\n        data_root='/root/autodl-tmp/data',\n        img_dir='images/val',\n        ann_dir='annotations/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                img_ratios=[0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0],\n                flip=True,\n                transforms=[\n                    dict(\n                        type='SETR_Resize',\n                        keep_ratio=True,\n                        crop_size=(896, 896),\n                        setr_multi_scale=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'work_dirs/my_city/latest.pth'\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(\n    type='AdamW',\n    lr=2e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    constructor='LayerDecayOptimizerConstructor',\n    paramwise_cfg=dict(num_layers=24, layer_decay_rate=0.9))\noptimizer_config = dict()\nlr_config = dict(\n    policy='poly',\n    warmup='linear',\n    warmup_iters=1500,\n    warmup_ratio=1e-06,\n    power=1.0,\n    min_lr=0.0,\n    by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=80000)\ncheckpoint_config = dict(by_epoch=False, interval=1000, max_keep_ckpts=1)\nevaluation = dict(\n    interval=1000, metric='mIoU', pre_eval=True, save_best='mIoU')\npretrained = 'pretrained/beit_large_patch16_224_pt22k_ft22k.pth'\nwork_dir = './work_dirs/my_city'\ngpu_ids = range(0, 1)\nauto_resume = False\nseed = 1524042185\n", "CLASSES": ["WATER", "ASPHALT", "GRASS", "HUMAN", "ANIMAL", "HIGH_VEGETATION", "GROUND_VEHICLE", "FACADE", "WIRE", "GARDEN_FURNITURE", "CONCRETE", "ROOF", "GRAVEL", "SOIL", "PRIMEAIR_PATTERN", "SNOW"], "PALETTE": [[148, 218, 255], [85, 85, 85], [200, 219, 190], [166, 133, 226], [255, 171, 225], [40, 150, 114], [234, 144, 133], [89, 82, 96], [255, 255, 0], [110, 87, 121], [205, 201, 195], [212, 80, 121], [159, 135, 114], [102, 90, 72], [255, 255, 102], [251, 247, 240]], "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 31500, "data_time": 0.03149, "decode.loss_cls": 0.83232, "decode.loss_mask": 0.89381, "decode.loss_dice": 1.59981, "decode.d0.loss_cls": 5.94189, "decode.d0.loss_mask": 0.92241, "decode.d0.loss_dice": 1.77517, "decode.d1.loss_cls": 0.95824, "decode.d1.loss_mask": 0.86667, "decode.d1.loss_dice": 1.65637, "decode.d2.loss_cls": 0.86793, "decode.d2.loss_mask": 0.8739, "decode.d2.loss_dice": 1.59683, "decode.d3.loss_cls": 0.89646, "decode.d3.loss_mask": 0.85437, "decode.d3.loss_dice": 1.55558, "decode.d4.loss_cls": 0.82897, "decode.d4.loss_mask": 0.86917, "decode.d4.loss_dice": 1.56841, "decode.d5.loss_cls": 0.87396, "decode.d5.loss_mask": 0.87668, "decode.d5.loss_dice": 1.5526, "decode.d6.loss_cls": 0.84699, "decode.d6.loss_mask": 0.88497, "decode.d6.loss_dice": 1.55066, "decode.d7.loss_cls": 0.80821, "decode.d7.loss_mask": 0.88372, "decode.d7.loss_dice": 1.57895, "decode.d8.loss_cls": 0.79497, "decode.d8.loss_mask": 0.88846, "decode.d8.loss_dice": 1.59095, "loss": 38.48943, "time": 2.85301}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0, "memory": 31500, "data_time": 0.02561, "decode.loss_cls": 0.7541, "decode.loss_mask": 0.8015, "decode.loss_dice": 1.38365, "decode.d0.loss_cls": 5.94334, "decode.d0.loss_mask": 0.895, "decode.d0.loss_dice": 1.57845, "decode.d1.loss_cls": 0.88403, "decode.d1.loss_mask": 0.81754, "decode.d1.loss_dice": 1.46962, "decode.d2.loss_cls": 0.80867, "decode.d2.loss_mask": 0.8227, "decode.d2.loss_dice": 1.40492, "decode.d3.loss_cls": 0.82386, "decode.d3.loss_mask": 0.7934, "decode.d3.loss_dice": 1.36814, "decode.d4.loss_cls": 0.79494, "decode.d4.loss_mask": 0.8031, "decode.d4.loss_dice": 1.37512, "decode.d5.loss_cls": 0.78407, "decode.d5.loss_mask": 0.81207, "decode.d5.loss_dice": 1.36591, "decode.d6.loss_cls": 0.79389, "decode.d6.loss_mask": 0.80319, "decode.d6.loss_dice": 1.34645, "decode.d7.loss_cls": 0.75263, "decode.d7.loss_mask": 0.80401, "decode.d7.loss_dice": 1.37326, "decode.d8.loss_cls": 0.76258, "decode.d8.loss_mask": 0.7931, "decode.d8.loss_dice": 1.376, "loss": 35.28925, "time": 3.03618}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.0, "memory": 31500, "data_time": 0.02916, "decode.loss_cls": 0.88431, "decode.loss_mask": 0.85612, "decode.loss_dice": 1.48467, "decode.d0.loss_cls": 5.95714, "decode.d0.loss_mask": 0.92943, "decode.d0.loss_dice": 1.66013, "decode.d1.loss_cls": 0.9886, "decode.d1.loss_mask": 0.86663, "decode.d1.loss_dice": 1.5849, "decode.d2.loss_cls": 0.93656, "decode.d2.loss_mask": 0.85782, "decode.d2.loss_dice": 1.51346, "decode.d3.loss_cls": 0.95693, "decode.d3.loss_mask": 0.83468, "decode.d3.loss_dice": 1.46359, "decode.d4.loss_cls": 0.9232, "decode.d4.loss_mask": 0.84761, "decode.d4.loss_dice": 1.47448, "decode.d5.loss_cls": 0.90525, "decode.d5.loss_mask": 0.8537, "decode.d5.loss_dice": 1.47811, "decode.d6.loss_cls": 0.90896, "decode.d6.loss_mask": 0.85801, "decode.d6.loss_dice": 1.467, "decode.d7.loss_cls": 0.87715, "decode.d7.loss_mask": 0.8432, "decode.d7.loss_dice": 1.46728, "decode.d8.loss_cls": 0.86533, "decode.d8.loss_mask": 0.84169, "decode.d8.loss_dice": 1.47554, "loss": 37.8615, "time": 3.12684}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.0, "memory": 31500, "data_time": 0.02023, "decode.loss_cls": 0.76261, "decode.loss_mask": 0.9165, "decode.loss_dice": 1.50457, "decode.d0.loss_cls": 5.97563, "decode.d0.loss_mask": 0.99476, "decode.d0.loss_dice": 1.76289, "decode.d1.loss_cls": 0.88311, "decode.d1.loss_mask": 0.95432, "decode.d1.loss_dice": 1.63651, "decode.d2.loss_cls": 0.80493, "decode.d2.loss_mask": 0.9211, "decode.d2.loss_dice": 1.53648, "decode.d3.loss_cls": 0.81797, "decode.d3.loss_mask": 0.90523, "decode.d3.loss_dice": 1.50426, "decode.d4.loss_cls": 0.76714, "decode.d4.loss_mask": 0.91115, "decode.d4.loss_dice": 1.50363, "decode.d5.loss_cls": 0.76514, "decode.d5.loss_mask": 0.9135, "decode.d5.loss_dice": 1.50144, "decode.d6.loss_cls": 0.79597, "decode.d6.loss_mask": 0.89938, "decode.d6.loss_dice": 1.47362, "decode.d7.loss_cls": 0.79434, "decode.d7.loss_mask": 0.90495, "decode.d7.loss_dice": 1.48403, "decode.d8.loss_cls": 0.77327, "decode.d8.loss_mask": 0.9027, "decode.d8.loss_dice": 1.48031, "loss": 37.7514, "time": 2.78798}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.0, "memory": 31500, "data_time": 0.02178, "decode.loss_cls": 0.7995, "decode.loss_mask": 0.83264, "decode.loss_dice": 1.44543, "decode.d0.loss_cls": 5.93322, "decode.d0.loss_mask": 0.93421, "decode.d0.loss_dice": 1.68125, "decode.d1.loss_cls": 0.86396, "decode.d1.loss_mask": 0.87836, "decode.d1.loss_dice": 1.59318, "decode.d2.loss_cls": 0.82001, "decode.d2.loss_mask": 0.85216, "decode.d2.loss_dice": 1.50965, "decode.d3.loss_cls": 0.83214, "decode.d3.loss_mask": 0.8229, "decode.d3.loss_dice": 1.44038, "decode.d4.loss_cls": 0.7863, "decode.d4.loss_mask": 0.84042, "decode.d4.loss_dice": 1.4761, "decode.d5.loss_cls": 0.79771, "decode.d5.loss_mask": 0.83147, "decode.d5.loss_dice": 1.4468, "decode.d6.loss_cls": 0.8141, "decode.d6.loss_mask": 0.83002, "decode.d6.loss_dice": 1.42848, "decode.d7.loss_cls": 0.77497, "decode.d7.loss_mask": 0.83081, "decode.d7.loss_dice": 1.43836, "decode.d8.loss_cls": 0.78715, "decode.d8.loss_mask": 0.82403, "decode.d8.loss_dice": 1.45677, "loss": 36.6025, "time": 2.74443}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.0, "memory": 31500, "data_time": 0.02127, "decode.loss_cls": 0.90127, "decode.loss_mask": 0.90908, "decode.loss_dice": 1.54316, "decode.d0.loss_cls": 5.98204, "decode.d0.loss_mask": 0.98972, "decode.d0.loss_dice": 1.76775, "decode.d1.loss_cls": 1.0223, "decode.d1.loss_mask": 0.93116, "decode.d1.loss_dice": 1.6611, "decode.d2.loss_cls": 0.91836, "decode.d2.loss_mask": 0.93633, "decode.d2.loss_dice": 1.60096, "decode.d3.loss_cls": 0.93253, "decode.d3.loss_mask": 0.89176, "decode.d3.loss_dice": 1.53407, "decode.d4.loss_cls": 0.8754, "decode.d4.loss_mask": 0.89997, "decode.d4.loss_dice": 1.54984, "decode.d5.loss_cls": 0.88991, "decode.d5.loss_mask": 0.89296, "decode.d5.loss_dice": 1.54265, "decode.d6.loss_cls": 0.90985, "decode.d6.loss_mask": 0.89645, "decode.d6.loss_dice": 1.52254, "decode.d7.loss_cls": 0.89166, "decode.d7.loss_mask": 0.90603, "decode.d7.loss_dice": 1.528, "decode.d8.loss_cls": 0.88466, "decode.d8.loss_mask": 0.91016, "decode.d8.loss_dice": 1.5438, "loss": 39.16549, "time": 2.74185}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.0, "memory": 31500, "data_time": 0.02087, "decode.loss_cls": 0.85434, "decode.loss_mask": 0.90262, "decode.loss_dice": 1.50793, "decode.d0.loss_cls": 5.95521, "decode.d0.loss_mask": 0.93953, "decode.d0.loss_dice": 1.74241, "decode.d1.loss_cls": 0.94806, "decode.d1.loss_mask": 0.90743, "decode.d1.loss_dice": 1.64364, "decode.d2.loss_cls": 0.90719, "decode.d2.loss_mask": 0.90691, "decode.d2.loss_dice": 1.54567, "decode.d3.loss_cls": 0.90851, "decode.d3.loss_mask": 0.88081, "decode.d3.loss_dice": 1.50536, "decode.d4.loss_cls": 0.87459, "decode.d4.loss_mask": 0.89176, "decode.d4.loss_dice": 1.50094, "decode.d5.loss_cls": 0.86524, "decode.d5.loss_mask": 0.88178, "decode.d5.loss_dice": 1.5056, "decode.d6.loss_cls": 0.90059, "decode.d6.loss_mask": 0.89168, "decode.d6.loss_dice": 1.48018, "decode.d7.loss_cls": 0.87296, "decode.d7.loss_mask": 0.89817, "decode.d7.loss_dice": 1.5007, "decode.d8.loss_cls": 0.86548, "decode.d8.loss_mask": 0.90751, "decode.d8.loss_dice": 1.52161, "loss": 38.41442, "time": 2.74029}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.0, "memory": 31500, "data_time": 0.0201, "decode.loss_cls": 0.69106, "decode.loss_mask": 0.84364, "decode.loss_dice": 1.42438, "decode.d0.loss_cls": 5.89858, "decode.d0.loss_mask": 0.94389, "decode.d0.loss_dice": 1.65753, "decode.d1.loss_cls": 0.78712, "decode.d1.loss_mask": 0.89875, "decode.d1.loss_dice": 1.54719, "decode.d2.loss_cls": 0.70788, "decode.d2.loss_mask": 0.85881, "decode.d2.loss_dice": 1.46873, "decode.d3.loss_cls": 0.74589, "decode.d3.loss_mask": 0.84346, "decode.d3.loss_dice": 1.42235, "decode.d4.loss_cls": 0.70149, "decode.d4.loss_mask": 0.84887, "decode.d4.loss_dice": 1.40055, "decode.d5.loss_cls": 0.67928, "decode.d5.loss_mask": 0.84107, "decode.d5.loss_dice": 1.412, "decode.d6.loss_cls": 0.72299, "decode.d6.loss_mask": 0.83086, "decode.d6.loss_dice": 1.40005, "decode.d7.loss_cls": 0.67774, "decode.d7.loss_mask": 0.84602, "decode.d7.loss_dice": 1.4129, "decode.d8.loss_cls": 0.67056, "decode.d8.loss_mask": 0.84607, "decode.d8.loss_dice": 1.40921, "loss": 35.4389, "time": 2.73893}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.0, "memory": 31500, "data_time": 0.02086, "decode.loss_cls": 0.76721, "decode.loss_mask": 0.85149, "decode.loss_dice": 1.47635, "decode.d0.loss_cls": 5.91812, "decode.d0.loss_mask": 0.9521, "decode.d0.loss_dice": 1.69677, "decode.d1.loss_cls": 0.82644, "decode.d1.loss_mask": 0.92263, "decode.d1.loss_dice": 1.5668, "decode.d2.loss_cls": 0.75546, "decode.d2.loss_mask": 0.90926, "decode.d2.loss_dice": 1.51844, "decode.d3.loss_cls": 0.7913, "decode.d3.loss_mask": 0.88761, "decode.d3.loss_dice": 1.49118, "decode.d4.loss_cls": 0.77939, "decode.d4.loss_mask": 0.88655, "decode.d4.loss_dice": 1.49335, "decode.d5.loss_cls": 0.80444, "decode.d5.loss_mask": 0.87923, "decode.d5.loss_dice": 1.478, "decode.d6.loss_cls": 0.77533, "decode.d6.loss_mask": 0.86528, "decode.d6.loss_dice": 1.48726, "decode.d7.loss_cls": 0.75684, "decode.d7.loss_mask": 0.87235, "decode.d7.loss_dice": 1.48132, "decode.d8.loss_cls": 0.7308, "decode.d8.loss_mask": 0.86835, "decode.d8.loss_dice": 1.49657, "loss": 36.98622, "time": 2.74247}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.0, "memory": 31500, "data_time": 0.01977, "decode.loss_cls": 0.752, "decode.loss_mask": 0.80518, "decode.loss_dice": 1.38974, "decode.d0.loss_cls": 5.9171, "decode.d0.loss_mask": 0.85773, "decode.d0.loss_dice": 1.59978, "decode.d1.loss_cls": 0.83718, "decode.d1.loss_mask": 0.7919, "decode.d1.loss_dice": 1.50824, "decode.d2.loss_cls": 0.75167, "decode.d2.loss_mask": 0.79245, "decode.d2.loss_dice": 1.45858, "decode.d3.loss_cls": 0.78324, "decode.d3.loss_mask": 0.78755, "decode.d3.loss_dice": 1.41733, "decode.d4.loss_cls": 0.76858, "decode.d4.loss_mask": 0.78159, "decode.d4.loss_dice": 1.3992, "decode.d5.loss_cls": 0.75287, "decode.d5.loss_mask": 0.78852, "decode.d5.loss_dice": 1.38463, "decode.d6.loss_cls": 0.76789, "decode.d6.loss_mask": 0.79755, "decode.d6.loss_dice": 1.3872, "decode.d7.loss_cls": 0.73231, "decode.d7.loss_mask": 0.79963, "decode.d7.loss_dice": 1.40324, "decode.d8.loss_cls": 0.77021, "decode.d8.loss_mask": 0.8044, "decode.d8.loss_dice": 1.39577, "loss": 35.18325, "time": 2.74391}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.0, "memory": 31500, "data_time": 0.01968, "decode.loss_cls": 0.71376, "decode.loss_mask": 0.86332, "decode.loss_dice": 1.50738, "decode.d0.loss_cls": 5.86476, "decode.d0.loss_mask": 0.92072, "decode.d0.loss_dice": 1.71631, "decode.d1.loss_cls": 0.80129, "decode.d1.loss_mask": 0.92375, "decode.d1.loss_dice": 1.61961, "decode.d2.loss_cls": 0.73039, "decode.d2.loss_mask": 0.90175, "decode.d2.loss_dice": 1.56466, "decode.d3.loss_cls": 0.75168, "decode.d3.loss_mask": 0.87712, "decode.d3.loss_dice": 1.5107, "decode.d4.loss_cls": 0.72988, "decode.d4.loss_mask": 0.87286, "decode.d4.loss_dice": 1.50675, "decode.d5.loss_cls": 0.71851, "decode.d5.loss_mask": 0.87234, "decode.d5.loss_dice": 1.50834, "decode.d6.loss_cls": 0.71524, "decode.d6.loss_mask": 0.87018, "decode.d6.loss_dice": 1.48487, "decode.d7.loss_cls": 0.6862, "decode.d7.loss_mask": 0.86863, "decode.d7.loss_dice": 1.49012, "decode.d8.loss_cls": 0.70788, "decode.d8.loss_mask": 0.86586, "decode.d8.loss_dice": 1.48783, "loss": 36.65268, "time": 2.73867}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.0, "memory": 31500, "data_time": 0.02078, "decode.loss_cls": 0.72526, "decode.loss_mask": 0.85362, "decode.loss_dice": 1.43551, "decode.d0.loss_cls": 5.87376, "decode.d0.loss_mask": 0.94051, "decode.d0.loss_dice": 1.67402, "decode.d1.loss_cls": 0.79722, "decode.d1.loss_mask": 0.88809, "decode.d1.loss_dice": 1.568, "decode.d2.loss_cls": 0.77252, "decode.d2.loss_mask": 0.86885, "decode.d2.loss_dice": 1.48411, "decode.d3.loss_cls": 0.75447, "decode.d3.loss_mask": 0.86204, "decode.d3.loss_dice": 1.44523, "decode.d4.loss_cls": 0.73723, "decode.d4.loss_mask": 0.84973, "decode.d4.loss_dice": 1.43234, "decode.d5.loss_cls": 0.73913, "decode.d5.loss_mask": 0.8464, "decode.d5.loss_dice": 1.42383, "decode.d6.loss_cls": 0.73255, "decode.d6.loss_mask": 0.85115, "decode.d6.loss_dice": 1.43209, "decode.d7.loss_cls": 0.71903, "decode.d7.loss_mask": 0.852, "decode.d7.loss_dice": 1.44041, "decode.d8.loss_cls": 0.71041, "decode.d8.loss_mask": 0.85498, "decode.d8.loss_dice": 1.43638, "loss": 36.00088, "time": 2.74333}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.0, "memory": 31500, "data_time": 0.02068, "decode.loss_cls": 0.71293, "decode.loss_mask": 0.78758, "decode.loss_dice": 1.45072, "decode.d0.loss_cls": 5.82971, "decode.d0.loss_mask": 0.84348, "decode.d0.loss_dice": 1.61605, "decode.d1.loss_cls": 0.73636, "decode.d1.loss_mask": 0.81924, "decode.d1.loss_dice": 1.56764, "decode.d2.loss_cls": 0.6932, "decode.d2.loss_mask": 0.81097, "decode.d2.loss_dice": 1.51538, "decode.d3.loss_cls": 0.74626, "decode.d3.loss_mask": 0.79729, "decode.d3.loss_dice": 1.46729, "decode.d4.loss_cls": 0.73206, "decode.d4.loss_mask": 0.80127, "decode.d4.loss_dice": 1.47169, "decode.d5.loss_cls": 0.73356, "decode.d5.loss_mask": 0.79645, "decode.d5.loss_dice": 1.45856, "decode.d6.loss_cls": 0.74593, "decode.d6.loss_mask": 0.79845, "decode.d6.loss_dice": 1.44364, "decode.d7.loss_cls": 0.73479, "decode.d7.loss_mask": 0.79583, "decode.d7.loss_dice": 1.46591, "decode.d8.loss_cls": 0.70403, "decode.d8.loss_mask": 0.78476, "decode.d8.loss_dice": 1.46767, "loss": 35.32871, "time": 2.74941}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.0, "memory": 31500, "data_time": 0.0218, "decode.loss_cls": 0.65162, "decode.loss_mask": 0.85244, "decode.loss_dice": 1.43864, "decode.d0.loss_cls": 5.84468, "decode.d0.loss_mask": 0.88639, "decode.d0.loss_dice": 1.60035, "decode.d1.loss_cls": 0.68117, "decode.d1.loss_mask": 0.89196, "decode.d1.loss_dice": 1.57071, "decode.d2.loss_cls": 0.6583, "decode.d2.loss_mask": 0.87534, "decode.d2.loss_dice": 1.49237, "decode.d3.loss_cls": 0.69355, "decode.d3.loss_mask": 0.86054, "decode.d3.loss_dice": 1.44174, "decode.d4.loss_cls": 0.69634, "decode.d4.loss_mask": 0.85029, "decode.d4.loss_dice": 1.43859, "decode.d5.loss_cls": 0.66861, "decode.d5.loss_mask": 0.85062, "decode.d5.loss_dice": 1.45084, "decode.d6.loss_cls": 0.66734, "decode.d6.loss_mask": 0.84582, "decode.d6.loss_dice": 1.43695, "decode.d7.loss_cls": 0.64108, "decode.d7.loss_mask": 0.85382, "decode.d7.loss_dice": 1.4351, "decode.d8.loss_cls": 0.64953, "decode.d8.loss_mask": 0.85112, "decode.d8.loss_dice": 1.45044, "loss": 35.22629, "time": 2.74453}
{"mode": "train", "epoch": 2, "iter": 750, "lr": 0.0, "memory": 31500, "data_time": 0.06821, "decode.loss_cls": 0.57716, "decode.loss_mask": 0.86191, "decode.loss_dice": 1.37486, "decode.d0.loss_cls": 5.81552, "decode.d0.loss_mask": 0.92581, "decode.d0.loss_dice": 1.56076, "decode.d1.loss_cls": 0.63293, "decode.d1.loss_mask": 0.90282, "decode.d1.loss_dice": 1.52153, "decode.d2.loss_cls": 0.5862, "decode.d2.loss_mask": 0.8706, "decode.d2.loss_dice": 1.41238, "decode.d3.loss_cls": 0.59174, "decode.d3.loss_mask": 0.86603, "decode.d3.loss_dice": 1.3873, "decode.d4.loss_cls": 0.60072, "decode.d4.loss_mask": 0.86828, "decode.d4.loss_dice": 1.4019, "decode.d5.loss_cls": 0.602, "decode.d5.loss_mask": 0.87895, "decode.d5.loss_dice": 1.386, "decode.d6.loss_cls": 0.58348, "decode.d6.loss_mask": 0.86644, "decode.d6.loss_dice": 1.39354, "decode.d7.loss_cls": 0.54935, "decode.d7.loss_mask": 0.86172, "decode.d7.loss_dice": 1.40944, "decode.d8.loss_cls": 0.57704, "decode.d8.loss_mask": 0.86548, "decode.d8.loss_dice": 1.40413, "loss": 34.13602, "time": 2.79165}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.0, "memory": 31500, "data_time": 0.02098, "decode.loss_cls": 0.61765, "decode.loss_mask": 0.79753, "decode.loss_dice": 1.35463, "decode.d0.loss_cls": 5.7919, "decode.d0.loss_mask": 0.83542, "decode.d0.loss_dice": 1.50837, "decode.d1.loss_cls": 0.67636, "decode.d1.loss_mask": 0.82583, "decode.d1.loss_dice": 1.46754, "decode.d2.loss_cls": 0.66235, "decode.d2.loss_mask": 0.80423, "decode.d2.loss_dice": 1.38845, "decode.d3.loss_cls": 0.67408, "decode.d3.loss_mask": 0.79273, "decode.d3.loss_dice": 1.33813, "decode.d4.loss_cls": 0.6525, "decode.d4.loss_mask": 0.81231, "decode.d4.loss_dice": 1.3661, "decode.d5.loss_cls": 0.63812, "decode.d5.loss_mask": 0.82371, "decode.d5.loss_dice": 1.35505, "decode.d6.loss_cls": 0.64964, "decode.d6.loss_mask": 0.81785, "decode.d6.loss_dice": 1.36683, "decode.d7.loss_cls": 0.63995, "decode.d7.loss_mask": 0.81723, "decode.d7.loss_dice": 1.35773, "decode.d8.loss_cls": 0.64542, "decode.d8.loss_mask": 0.7906, "decode.d8.loss_dice": 1.36383, "loss": 33.63209, "time": 2.74583}
{"mode": "train", "epoch": 2, "iter": 850, "lr": 0.0, "memory": 31500, "data_time": 0.02077, "decode.loss_cls": 0.59248, "decode.loss_mask": 0.84075, "decode.loss_dice": 1.32198, "decode.d0.loss_cls": 5.80837, "decode.d0.loss_mask": 0.8858, "decode.d0.loss_dice": 1.47675, "decode.d1.loss_cls": 0.57173, "decode.d1.loss_mask": 0.86394, "decode.d1.loss_dice": 1.44422, "decode.d2.loss_cls": 0.54338, "decode.d2.loss_mask": 0.84502, "decode.d2.loss_dice": 1.37215, "decode.d3.loss_cls": 0.61815, "decode.d3.loss_mask": 0.8431, "decode.d3.loss_dice": 1.32282, "decode.d4.loss_cls": 0.58739, "decode.d4.loss_mask": 0.8309, "decode.d4.loss_dice": 1.32806, "decode.d5.loss_cls": 0.56901, "decode.d5.loss_mask": 0.81973, "decode.d5.loss_dice": 1.33556, "decode.d6.loss_cls": 0.59318, "decode.d6.loss_mask": 0.81768, "decode.d6.loss_dice": 1.28758, "decode.d7.loss_cls": 0.57356, "decode.d7.loss_mask": 0.82907, "decode.d7.loss_dice": 1.32514, "decode.d8.loss_cls": 0.60678, "decode.d8.loss_mask": 0.83138, "decode.d8.loss_dice": 1.31859, "loss": 33.00425, "time": 2.74339}
{"mode": "train", "epoch": 2, "iter": 900, "lr": 0.0, "memory": 31500, "data_time": 0.01975, "decode.loss_cls": 0.62916, "decode.loss_mask": 0.83345, "decode.loss_dice": 1.46864, "decode.d0.loss_cls": 5.72501, "decode.d0.loss_mask": 0.86194, "decode.d0.loss_dice": 1.59298, "decode.d1.loss_cls": 0.60793, "decode.d1.loss_mask": 0.85069, "decode.d1.loss_dice": 1.55655, "decode.d2.loss_cls": 0.57261, "decode.d2.loss_mask": 0.84029, "decode.d2.loss_dice": 1.48227, "decode.d3.loss_cls": 0.64508, "decode.d3.loss_mask": 0.81606, "decode.d3.loss_dice": 1.45557, "decode.d4.loss_cls": 0.61173, "decode.d4.loss_mask": 0.83055, "decode.d4.loss_dice": 1.46445, "decode.d5.loss_cls": 0.64475, "decode.d5.loss_mask": 0.83321, "decode.d5.loss_dice": 1.45367, "decode.d6.loss_cls": 0.62955, "decode.d6.loss_mask": 0.83946, "decode.d6.loss_dice": 1.4506, "decode.d7.loss_cls": 0.60686, "decode.d7.loss_mask": 0.83139, "decode.d7.loss_dice": 1.47359, "decode.d8.loss_cls": 0.6101, "decode.d8.loss_mask": 0.8363, "decode.d8.loss_dice": 1.45963, "loss": 34.51406, "time": 2.74914}
{"mode": "train", "epoch": 2, "iter": 950, "lr": 0.0, "memory": 31500, "data_time": 0.02006, "decode.loss_cls": 0.58566, "decode.loss_mask": 0.87936, "decode.loss_dice": 1.44114, "decode.d0.loss_cls": 5.73467, "decode.d0.loss_mask": 0.92197, "decode.d0.loss_dice": 1.54926, "decode.d1.loss_cls": 0.59568, "decode.d1.loss_mask": 0.89976, "decode.d1.loss_dice": 1.55958, "decode.d2.loss_cls": 0.56727, "decode.d2.loss_mask": 0.88382, "decode.d2.loss_dice": 1.48369, "decode.d3.loss_cls": 0.59891, "decode.d3.loss_mask": 0.88091, "decode.d3.loss_dice": 1.43613, "decode.d4.loss_cls": 0.58052, "decode.d4.loss_mask": 0.88516, "decode.d4.loss_dice": 1.44101, "decode.d5.loss_cls": 0.57445, "decode.d5.loss_mask": 0.86849, "decode.d5.loss_dice": 1.44172, "decode.d6.loss_cls": 0.58684, "decode.d6.loss_mask": 0.87945, "decode.d6.loss_dice": 1.41972, "decode.d7.loss_cls": 0.58517, "decode.d7.loss_mask": 0.88215, "decode.d7.loss_dice": 1.44461, "decode.d8.loss_cls": 0.56069, "decode.d8.loss_mask": 0.87855, "decode.d8.loss_dice": 1.42729, "loss": 34.47362, "time": 2.73943}
{"mode": "train", "epoch": 2, "iter": 1000, "lr": 0.0, "memory": 31500, "data_time": 0.01967, "decode.loss_cls": 0.63485, "decode.loss_mask": 0.7921, "decode.loss_dice": 1.38706, "decode.d0.loss_cls": 5.69576, "decode.d0.loss_mask": 0.87374, "decode.d0.loss_dice": 1.56311, "decode.d1.loss_cls": 0.63195, "decode.d1.loss_mask": 0.8406, "decode.d1.loss_dice": 1.49713, "decode.d2.loss_cls": 0.6033, "decode.d2.loss_mask": 0.81885, "decode.d2.loss_dice": 1.46914, "decode.d3.loss_cls": 0.58185, "decode.d3.loss_mask": 0.81313, "decode.d3.loss_dice": 1.43246, "decode.d4.loss_cls": 0.61898, "decode.d4.loss_mask": 0.80681, "decode.d4.loss_dice": 1.429, "decode.d5.loss_cls": 0.56895, "decode.d5.loss_mask": 0.81203, "decode.d5.loss_dice": 1.43063, "decode.d6.loss_cls": 0.59941, "decode.d6.loss_mask": 0.79857, "decode.d6.loss_dice": 1.38848, "decode.d7.loss_cls": 0.57096, "decode.d7.loss_mask": 0.80443, "decode.d7.loss_dice": 1.42998, "decode.d8.loss_cls": 0.58675, "decode.d8.loss_mask": 0.79743, "decode.d8.loss_dice": 1.40323, "loss": 33.68066, "time": 3.71129}
{"mode": "val", "epoch": 2, "iter": 357, "lr": 0.0, "aAcc": 0.8983, "mIoU": 0.6431, "mAcc": 0.7254, "IoU.WATER": 0.6723, "IoU.ASPHALT": 0.824, "IoU.GRASS": 0.8402, "IoU.HUMAN": 0.6867, "IoU.ANIMAL": 0.0, "IoU.HIGH_VEGETATION": 0.8839, "IoU.GROUND_VEHICLE": 0.9155, "IoU.FACADE": 0.8328, "IoU.WIRE": 0.1852, "IoU.GARDEN_FURNITURE": 0.6021, "IoU.CONCRETE": 0.8093, "IoU.ROOF": 0.9549, "IoU.GRAVEL": 0.22, "IoU.SOIL": 0.3107, "IoU.PRIMEAIR_PATTERN": 0.8865, "IoU.SNOW": 0.6649, "Acc.WATER": 0.7135, "Acc.ASPHALT": 0.915, "Acc.GRASS": 0.9049, "Acc.HUMAN": 0.8364, "Acc.ANIMAL": 0.0, "Acc.HIGH_VEGETATION": 0.9398, "Acc.GROUND_VEHICLE": 0.9597, "Acc.FACADE": 0.9186, "Acc.WIRE": 0.2145, "Acc.GARDEN_FURNITURE": 0.841, "Acc.CONCRETE": 0.8948, "Acc.ROOF": 0.9757, "Acc.GRAVEL": 0.2464, "Acc.SOIL": 0.5822, "Acc.PRIMEAIR_PATTERN": 0.934, "Acc.SNOW": 0.7305}
{"mode": "train", "epoch": 2, "iter": 1050, "lr": 0.0, "memory": 31500, "data_time": 467.8369, "decode.loss_cls": 0.66112, "decode.loss_mask": 0.82167, "decode.loss_dice": 1.38412, "decode.d0.loss_cls": 5.68899, "decode.d0.loss_mask": 0.8503, "decode.d0.loss_dice": 1.53338, "decode.d1.loss_cls": 0.64445, "decode.d1.loss_mask": 0.84465, "decode.d1.loss_dice": 1.48759, "decode.d2.loss_cls": 0.6363, "decode.d2.loss_mask": 0.83135, "decode.d2.loss_dice": 1.45831, "decode.d3.loss_cls": 0.67151, "decode.d3.loss_mask": 0.82758, "decode.d3.loss_dice": 1.37998, "decode.d4.loss_cls": 0.6528, "decode.d4.loss_mask": 0.83476, "decode.d4.loss_dice": 1.39071, "decode.d5.loss_cls": 0.63526, "decode.d5.loss_mask": 0.83353, "decode.d5.loss_dice": 1.40361, "decode.d6.loss_cls": 0.65932, "decode.d6.loss_mask": 0.82621, "decode.d6.loss_dice": 1.39493, "decode.d7.loss_cls": 0.64282, "decode.d7.loss_mask": 0.83552, "decode.d7.loss_dice": 1.41549, "decode.d8.loss_cls": 0.64359, "decode.d8.loss_mask": 0.83462, "decode.d8.loss_dice": 1.40249, "loss": 34.12694, "time": 470.825}
